#YAML의 핵심은 문서 마크업이 아닌 데이터 중심에 있음
#Yet Another Markup Language 에서 YAML Ain't Markup Language 로 변경
#XML과 JSOM이 데이터 직렬화에 주로 쓰이기 시작하면서 YAML은 가벼운 마크업 언어로 사용
#key는 콜론 형식으로 표기하며, 들여쓰기가 중요함. 들여쓰기 뒤에 value가 옴
#배열은 대쉬(-)로 표현
# | 기호로 멀티라인 사용
# |- : -기호가 있으면 마지막에 줄바꿈이 포함되지 않음.
#.properties의 kdt.version="v1.0"과 같음
# ---을 구분으로 한 개의 파일에 여러 개의 yaml을 정의할 수 있음.


# 첫 번째로는 여러 프로파일에 관련 없이 공통적으로 사용되는 것을 적음. 모든 프로파일에서 사용되기 위함.
# 어떤 profile에 종속되지 않고 모든 프로파일에 사용
# 공통적용
servers:
  - dev.bar.com
  - foo.bar.com


---
# local profile에 적용
#spring.config.activate.on-profile 은 SpringBoot에서 지원하는 기능. SpringBoot에서 동작함.
spring.config.activate.on-profile: local

#로그 레벨 설정
#https://docs.spring.io/spring-boot/docs/2.5.1/reference/htmlsingle/#howto.logging
logging:
  level:
    root: warn

#DataSource
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/order_mgmt
    username: root
    password: test1234@#
    driver-class-name: com.mysql.cj.jdbc.Driver
  thymeleaf:
    view-names: "views/*"
    prefix: "/WEB-INF/"

#Embeded tomcat, server관련 설정
server:
  servlet:
    context-path: /kdt  #localhost:8080/kdt/*

kdt:
  version: "v1.0"
  minimum-order-amount: 1
  support-vendors:
    - a
    - b
    - c
    - d
  description: |-
    line 1 hello world
    line 2 xxx
    line 3

---
# dev profile에 적용
spring.config.activate.on-profile: dev
kdt:
  version: "v1.0-dev"
  minimum-order-amount: 1
  support-vendors:
    - dev-a
    - dev-b
    - dev-c
    - dev-d
  description: |-
    dev
    dev



